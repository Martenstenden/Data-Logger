name: .NET Framework CI/CD for Data Logger

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ] 
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build & Test (.NET Framework)
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1
      with:
        nuget-version: 'latest'

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1

    - name: Restore NuGet packages
      run: nuget restore "Data Logger/Data Logger.sln" -SolutionDirectory "Data Logger"

    - name: Build Solution
      run: msbuild "Data Logger/Data Logger.sln" /p:Configuration=Release /p:Platform="Any CPU"

    - name: Run Unit Tests
      shell: pwsh
      run: |
        $vstestPaths = @(
            "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/Common7/IDE/Extensions/TestPlatform/vstest.console.exe",
            "C:/Program Files/Microsoft Visual Studio/2022/Professional/Common7/IDE/Extensions/TestPlatform/vstest.console.exe",
            "C:/Program Files/Microsoft Visual Studio/2022/Community/Common7/IDE/Extensions/TestPlatform/vstest.console.exe",
            "C:/Program Files/Microsoft Visual Studio/2019/Enterprise/Common7/IDE/CommonExtensions/Microsoft/TestWindow/vstest.console.exe",
            "C:/Program Files/Microsoft Visual Studio/2019/Professional/Common7/IDE/CommonExtensions/Microsoft/TestWindow/vstest.console.exe",
            "C:/Program Files/Microsoft Visual Studio/2019/Community/Common7/IDE/CommonExtensions/Microsoft/TestWindow/vstest.console.exe"
        )
        $vstestPath = $vstestPaths | Where-Object { Test-Path $_ -PathType Leaf } | Select-Object -First 1

        if (-not $vstestPath) {
            Write-Error "VSTest.Console.exe niet gevonden."
            $vstestPath = (where.exe vstest.console.exe | Select-Object -First 1)
            if (-not $vstestPath) {
                 Write-Error "VSTest.Console.exe ook niet gevonden via where.exe. Zorg dat Visual Studio Test Platform is ge√Ønstalleerd."
                 exit 1
            }
        }
        Write-Host "VSTest.Console.exe gevonden op: $vstestPath"

        $testDllPath = "DataLogger.Tests/bin/Release/DataLogger.Tests.dll"
        $unitTestFilter = '/TestCaseFilter:"TestCategory!=IntegrationTest"'
        $unitTestResultFile = "unit_test_results.trx"

        Write-Host "Unit Test DLL Pad: $testDllPath"
        Write-Host "Unit Test Filter: $unitTestFilter"
        & $vstestPath $testDllPath /Logger:"trx;LogFileName=$unitTestResultFile" $unitTestFilter /EnableCodeCoverage /InIsolation

    - name: Upload Unit Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results-framework
        path: unit_test_results.trx

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest # Belangrijk: Gebruik een Linux runner
    container:
      image: ghcr.io/opcfoundation/uanetstandard/refserver:latest
      ports:
        - 62541:62541
      volumes:
        - ${{ github.workspace }}/DataLogger.Tests/ReferenceServerFiles/OPC Foundation:/root/.local/share/OPC Foundation
      options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Integration Tests
        shell: pwsh
        run: |
          # Install .NET Core SDK (of een andere geschikte runtime)
          # Dit is een voorbeeld, pas aan aan jouw behoeften
          # apt-get update
          # apt-get install -y dotnet-sdk-6.0
          # export DOTNET_ROOT=/usr/share/dotnet
          # export PATH=$PATH:$DOTNET_ROOT
          # dotnet --info

          # VSTest via dotnet test gebruiken (eenvoudiger dan vstest.console.exe)
          $testDllPath = "DataLogger.Tests/bin/Release/DataLogger.Tests.dll"
          $integrationTestFilter = '/TestCaseFilter:"TestCategory=IntegrationTest"'
          $integrationTestResultFile = "integration_test_results.trx"

          Write-Host "Integration Test DLL Pad: $testDllPath"
          Write-Host "Integration Test Filter: $integrationTestFilter"

          dotnet test $testDllPath --logger:"trx;LogFileName=$integrationTestResultFile" --filter $integrationTestFilter
        timeout-minutes: 10

      - name: Upload Integration Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: integration_test_results.trx

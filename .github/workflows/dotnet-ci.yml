name: .NET CI/CD for Data Logger

on:
  push: 
    branches: [ main, develop ]
  pull_request: 
    branches: [ main, develop ]
  workflow_dispatch: 

jobs:
  build-and-unit-test:
    name: Build & Unit Test
    runs-on: windows-latest 

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1
      with:
        nuget-version: 'latest'

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1

    - name: Restore NuGet packages for Solution
      run: nuget restore "Data Logger/Data Logger.sln"

    - name: Build Solution with MSBuild
      run: msbuild "Data Logger/Data Logger.sln" /p:Configuration=Release /p:Platform="Any CPU"

    - name: Run Unit Tests with VSTest.Console
      run: |
        $vstestPath = Get-Command vstest.console.exe -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Source
        if (-not $vstestPath) {
            $vsInstallPaths = @(
                "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\Extensions\TestPlatform",
                "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Professional\Common7\IDE\Extensions\TestPlatform",
                "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\TestPlatform",
                "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\Extensions\TestPlatform",
                "${env:ProgramFiles}\Microsoft Visual Studio\2022\Professional\Common7\IDE\Extensions\TestPlatform",
                "${env:ProgramFiles}\Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\TestPlatform",

                "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TestWindow",
                "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Professional\Common7\IDE\CommonExtensions\Microsoft\TestWindow",
                "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\TestWindow"
            )
            foreach ($path in $vsInstallPaths) {
                $testExe = Join-Path $path "vstest.console.exe"
                if (Test-Path $testExe) {
                    $vstestPath = $testExe
                    break
                }
            }
        }
        
        if (-not $vstestPath) {
            Write-Error "VSTest.Console.exe niet gevonden. Controleer de paden of installeer 'Microsoft.TestPlatform' NuGet-pakket in testproject en probeer 'dotnet test'."
            exit 1
        }

        Write-Host "VSTest.Console.exe gevonden op: $vstestPath"
        
        $testDllPath = "DataLogger.Tests/bin/Release/DataLogger.Tests.dll" # Pas dit pad aan!

        $testFilter = '/TestCaseFilter:"FullyQualifiedName~DataLogger.IntegrationTest"'

        $resultFile = "unit_test_results.trx"

        Write-Host "Test DLL Pad: $testDllPath"
        Write-Host "Filter: $testFilter"
        Write-Host "Resultaat Bestand: $resultFile"
        
        & $vstestPath $testDllPath /Logger:"trx;LogFileName=$resultFile" $testFilter /EnableCodeCoverage /InIsolation
      shell: pwsh

    - name: Upload Unit Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results
        path: DataLogger.Tests/TestResults/unit_test_results.trx

  integration-test:
    name: Integration Test with Docker OPC UA Server
    runs-on: windows-latest 
    needs: build-and-unit-test 

    # services: 
    #   docker:
    #     image: docker:dind 
    #     options: --privileged 

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1
      with:
        nuget-version: 'latest'

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1

    - name: Restore NuGet packages for Test Project
      run: nuget restore "Data Logger/Data Logger.sln" -SolutionDirectory "Data Logger" 

    - name: Build Test Project
      run: msbuild "Data Logger/Data Logger.sln" /p:Configuration=Release /p:Platform="Any CPU"

    - name: Start OPC UA Reference Server in Docker
      shell: pwsh
      run: |
        Write-Host "Verwacht dat OneTimeSetUp de Docker container start..."
        if (-not (Test-Path Env:DOCKER_HOST)) {
            Write-Warning "DOCKER_HOST environment variable not set. Docker Desktop might not be configured for remote access or to run Linux containers easily."
        }
        docker --version # Check of docker CLI werkt

    - name: Run Integration Tests with VSTest.Console
      shell: pwsh
      run: |
        if (-not $vstestPath) { Write-Error "VSTest.Console.exe niet gevonden."; exit 1 }
        Write-Host "VSTest.Console.exe gevonden op: $vstestPath"
        
        $testDllPath = "DataLogger.Tests/bin/Release/DataLogger.Tests.dll" # Controleer dit pad!

        $testFilter = '/TestCaseFilter:"TestCategory=IntegrationTest"' # Alleen IntegrationTest
        $resultFile = "integration_test_results.trx"

        Write-Host "Test DLL Pad (Integration): $testDllPath"
        Write-Host "Filter (Integration): $testFilter"
        & $vstestPath $testDllPath /Logger:"trx;LogFileName=$resultFile" $testFilter /EnableCodeCoverage /InIsolation
      timeout-minutes: 20
      
    - name: Upload Integration Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results-framework
        path: integration_test_results.trx
        
      timeout-minutes: 15

name: .NET Desktop CI/CD for Data Logger

on:
  push:
    branches: [ "main", "develop" ] # Triggert op push naar main en develop branches
  pull_request:
    branches: [ "main" ] # Triggert op pull requests naar de main branch

jobs:
  build-and-test:
    runs-on: windows-latest # Gebruik een Windows runner voor .NET Framework projecten

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2
      with:
        nuget-version: 'latest' # Gebruik de laatste stabiele versie van NuGet

    - name: Restore NuGet packages
      run: nuget restore "Data Logger.sln" # Herstel packages voor de gehele solution

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x86 # Of x64, afhankelijk van je project target

    - name: Build solution
      run: msbuild "Data Logger.sln" /p:Configuration=Release /p:Platform="Any CPU" # Bouw de solution in Release configuratie

    - name: Setup VSTest
      uses: darenm/Setup-VSTest@v1.2 # Action om VSTest.console.exe makkelijk beschikbaar te maken

    - name: Run Unit Tests
      run: vstest.console.exe "DataLogger.Tests/bin/Release/DataLogger.Tests.dll" /Logger:trx /ResultsDirectory:"TestResults"
      # Pas het pad naar DataLogger.Tests.dll aan indien nodig na de build.
      # Deze stap faalt de workflow als er tests falen.

    - name: Upload Unit Test Results
      if: always() # Upload altijd, ook als tests falen, voor analyse
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results
        path: TestResults/**/*.trx

    # --- Integratietests met Docker ---
    # Deze stappen vereisen dat Docker correct werkt op de GitHub runner
    # en dat je DockerTestHelper.cs de container correct kan beheren.
    - name: Check Docker version (for debugging)
      run: docker --version

    - name: Check Docker is running (for debugging)
      run: docker ps
      continue-on-error: true # Voor het geval Docker daemon niet direct reageert

    - name: Run Integration Tests
      # Deze stap is complexer vanwege de Docker afhankelijkheid.
      # Je DockerTestHelper.cs zal proberen de container te starten.
      # Zorg dat de image 'ghcr.io/opcfoundation/uanetstandard/refserver:latest' publiek toegankelijk is.
      run: vstest.console.exe "DataLogger.Tests/bin/Release/DataLogger.Tests.dll" /TestCaseFilter:"Category=IntegrationTest" /Logger:trx /ResultsDirectory:"IntegrationTestResults"
      # Gebruik /TestCaseFilter als je tests hebt gecategoriseerd (bijv. [Category("IntegrationTest")] in NUnit).
      # Als je geen categorieÃ«n hebt, en alle tests in DataLogger.Tests.dll zijn integratietests,
      # kun je de /TestCaseFilter weglaten, maar het is best practice om ze te scheiden.
      # Deze stap faalt de workflow als er tests falen.
      # `continue-on-error: true` kan hier tijdelijk gebruikt worden tijdens het debuggen van de Docker setup.

    - name: Upload Integration Test Results
      if: always() # Upload altijd, ook als tests falen, voor analyse
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: IntegrationTestResults/**/*.trx

    - name: Upload Build Artifact (Data Logger Application)
      uses: actions/upload-artifact@v4
      with:
        name: data-logger-application
        path: | # Lijst van paden naar de artefacten
          Data Logger/bin/Release/**/*.exe
          Data Logger/bin/Release/**/*.dll
          Data Logger/bin/Release/**/*.config
          Data Logger/bin/Release/Logs # Optioneel, als je de standaard logmap wilt meenemen
          Data Logger/bin/Release/LoggedData # Optioneel
          Data Logger/bin/Release/CertificateStores # Belangrijk voor OPC UA
        # Exclude test adapters en andere onnodige bestanden
        # path-exclude: |
        #   **/*testadapter*
        #   **/*.pdb
        #   **/*.xml # Tenzij je XML documentatie bestanden wilt deployen

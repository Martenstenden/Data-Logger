name: .NET Framework CI/CD for Data Logger

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build-and-test: 
    name: Build & Test (.NET Framework)
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1 
      with:
        nuget-version: 'latest'

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1 

    - name: Restore NuGet packages for Solution

      run: nuget restore "Data Logger/Data Logger.sln" -SolutionDirectory "Data Logger"
      
    - name: Build Solution
      run: msbuild "Data Logger/Data Logger.sln" /p:Configuration=Release /p:Platform="Any CPU"

    - name: Run Unit Tests (excluding IntegrationTests)
      shell: pwsh
      run: |
        $vstestPaths = @(
            (Join-Path -Path ${env:ProgramFiles(x86)} -ChildPath "Microsoft Visual Studio\2022\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe"),
            (Join-Path -Path ${env:ProgramFiles(x86)} -ChildPath "Microsoft Visual Studio\2022\Professional\Common7\IDE\Extensions\TestPlatform\vstest.console.exe"),
            (Join-Path -Path ${env:ProgramFiles(x86)} -ChildPath "Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\TestPlatform\vstest.console.exe"),
            (Join-Path -Path ${env:ProgramFiles} -ChildPath "Microsoft Visual Studio\2022\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe"),
            (Join-Path -Path ${env:ProgramFiles} -ChildPath "Microsoft Visual Studio\2022\Professional\Common7\IDE\Extensions\TestPlatform\vstest.console.exe"),
            (Join-Path -Path ${env:ProgramFiles} -ChildPath "Microsoft Visual Studio\2022\Community\Common7\IDE\Extensions\TestPlatform\vstest.console.exe"),
        
            (Join-Path -Path ${env:ProgramFiles(x86)} -ChildPath "Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe"),
            (Join-Path -Path ${env:ProgramFiles(x86)} -ChildPath "Microsoft Visual Studio\2019\Professional\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe"),
            (Join-Path -Path ${env:ProgramFiles(x86)} -ChildPath "Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe")
        )
        $vstestPath = $vstestPaths | Where-Object { Test-Path $_ -PathType Leaf } | Select-Object -First 1 

        if (-not $vstestPath) {
            Write-Error "VSTest.Console.exe niet gevonden."
            
            $vstestPath = (where.exe vstest.console.exe | Select-Object -First 1)
            if (-not $vstestPath) {
                 Write-Error "VSTest.Console.exe ook niet gevonden via where.exe. Zorg dat Visual Studio Test Platform is ge√Ønstalleerd op de runner."
                 exit 1
            }
        }
        Write-Host "VSTest.Console.exe gevonden op: $vstestPath"
 
        $testDllPath = "DataLogger.Tests/bin/Release/DataLogger.Tests.dll" 

        $unitTestFilter = '/TestCaseFilter:"TestCategory!=IntegrationTest"'
        $unitTestResultFile = "unit_test_results.trx"

        Write-Host "Unit Test DLL Pad: $testDllPath"
        Write-Host "Unit Test Filter: $unitTestFilter"
        & $vstestPath $testDllPath /Logger:"trx;LogFileName=$unitTestResultFile" $unitTestFilter /EnableCodeCoverage /InIsolation

    - name: Upload Unit Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results-framework
        path: unit_test_results.trx 

    - name: Check Docker is available (Integration Test Prerequisite)
      shell: pwsh
      if: ${{ !contains(runner.os, 'Windows') }}
      run: |
        docker --version
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Docker CLI niet gevonden of werkt niet. Sla integratietests over of markeer als mislukt."
          
        }

    - name: Pull OPC UA Reference Server Image (Integration Test Prerequisite)
      shell: pwsh
      if: ${{ !contains(runner.os, 'Windows') }}
      run: docker pull ghcr.io/opcfoundation/uanetstandard/refserver:latest

    - name: Run Integration Tests (requires Docker)
      shell: pwsh
      if: ${{ !contains(runner.os, 'Windows') }}
      run: |

        if (-not $vstestPath) {
            $vstestPaths = @(
                Join-Path ${env:ProgramFiles(x86)} "Microsoft Visual Studio\2022\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe",
                
                Join-Path ${env:ProgramFiles(x86)} "Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe"
            )
            $vstestPath = $vstestPaths | Where-Object { Test-Path $_ } | Select-Object -First 1
            if (-not $vstestPath) {
                $vstestPath = (where.exe vstest.console.exe | Select-Object -First 1)
                if (-not $vstestPath) { Write-Error "VSTest.Console.exe niet gevonden voor integratietests."; exit 1 }
            }
        }
        Write-Host "VSTest.Console.exe (voor integratietests) gevonden op: $vstestPath"

        $testDllPath = "DataLogger.Tests/bin/Release/DataLogger.Tests.dll" 
        $integrationTestFilter = '/TestCaseFilter:"TestCategory=IntegrationTest"'
        $integrationTestResultFile = "integration_test_results.trx"

        Write-Host "Integration Test DLL Pad: $testDllPath"
        Write-Host "Integration Test Filter: $integrationTestFilter"
        
        & $vstestPath $testDllPath /Logger:"trx;LogFileName=$integrationTestResultFile" $integrationTestFilter /EnableCodeCoverage /InIsolation
      timeout-minutes: 20 

    - name: Upload Integration Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results-framework
        path: integration_test_results.trx

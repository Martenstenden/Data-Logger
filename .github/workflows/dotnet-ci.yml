name: .NET Desktop CI/CD for Data Logger

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.config') }}-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2
      with:
        nuget-version: 'latest'

    - name: Restore NuGet packages
      run: nuget restore "Data Logger/Data Logger.sln"

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x86 # Of x64, afhankelijk van je project

    - name: Code Formatting Check (dotnet format)
      run: |
        dotnet tool install --global dotnet-format --version 8.*
        dotnet format "Data Logger/Data Logger.sln" --verify-no-changes --verbosity diagnostic

    - name: Build solution (with Roslyn Analyzer errors)
      run: msbuild "Data Logger/Data Logger.sln" /p:Configuration=Release /p:Platform="Any CPU" /p:TreatWarningsAsErrors=true

    - name: Install Coverlet
      run: dotnet tool install --global coverlet.console

    - name: Run Unit Tests with Coverage
      shell: pwsh
      run: |
        $testAssembly = "DataLogger.Tests/bin/Release/DataLogger.Tests.dll" # Controleer dit pad!
        $testTargetArgs = "\`"$testAssembly\`" /TestCaseFilter:\"Category!=IntegrationTest\" /Logger:trx /ResultsDirectory:\"UnitTestResults\""
        coverlet $testAssembly --target "vstest.console.exe" --targetargs $testTargetArgs --format "cobertura" --output "coverage/cobertura.xml" --exclude-by-attribute "GeneratedCodeAttribute" --exclude "[Data?Logger.Views?]*.xaml.cs" "[Data?Logger?]*.AssemblyInfo.cs" "[Data?Logger?]*.Designer.cs"

    - name: Upload Unit Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results
        path: UnitTestResults/**/*.trx
        
    - name: Setup VSTest
      uses: darenm/Setup-VSTest@v1.2

    - name: Run Unit Tests (excluding IntegrationTests)
      run: vstest.console.exe "DataLogger.Tests/bin/Release/DataLogger.Tests.dll" /TestCaseFilter:"Category!=IntegrationTest" /Logger:trx /ResultsDirectory:"UnitTestResults"
      # Deze stap faalt de workflow als unit tests falen.
      # Zorg ervoor dat je unit tests de categorie "IntegrationTest" NIET hebben,
      # of een andere categorie hebben zoals "Unit" en je filtert daarop.

    - name: Upload Unit Test Results
      if: always() # Upload altijd, ook als tests falen, voor analyse
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results
        path: UnitTestResults/**/*.trx

    - name: Upload Coverage Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: coverage/cobertura.xml

    - name: Create Portable Package Directory
      run: mkdir ./portable-package

    - name: Copy Build Artifacts to Portable Package Directory
      shell: pwsh
      run: |
        $releaseDir = "Data Logger/Data Logger/bin/Release"
        Copy-Item -Path "$releaseDir/*.exe" -Destination "./portable-package" -ErrorAction SilentlyContinue
        Copy-Item -Path "$releaseDir/*.dll" -Destination "./portable-package" -ErrorAction SilentlyContinue
        Copy-Item -Path "$releaseDir/*.config" -Destination "./portable-package" -ErrorAction SilentlyContinue
        # Voeg hier andere bestanden of mappen toe die nodig zijn voor je portable app
        if (Test-Path "$releaseDir/Logs") { Copy-Item -Path "$releaseDir/Logs" -Destination "./portable-package" -Recurse -Force -ErrorAction SilentlyContinue }
        if (Test-Path "$releaseDir/LoggedData") { Copy-Item -Path "$releaseDir/LoggedData" -Destination "./portable-package" -Recurse -Force -ErrorAction SilentlyContinue }
        if (Test-Path "$releaseDir/CertificateStores") { Copy-Item -Path "$releaseDir/CertificateStores" -Destination "./portable-package" -Recurse -Force -ErrorAction SilentlyContinue }

    - name: Zip Portable Package
      shell: pwsh
      run: Compress-Archive -Path ./portable-package/* -DestinationPath ./data-logger-portable.zip -ErrorAction Stop

    - name: Upload Portable Package Artifact (voor interne inspectie/andere jobs)
      uses: actions/upload-artifact@v4
      with:
        name: data-logger-portable-zip
        path: ./data-logger-portable.zip

    # Deployment: Maak een GitHub Release en upload het ZIP-bestand
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v') # Alleen uitvoeren voor tags (bijv. v1.0.0)
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Data Logger ${{ github.ref_name }}
        body: |
          Data Logger Release ${{ github.ref_name }}
          Portable application package.
        draft: false
        prerelease: contains(github.ref_name, '-beta') || contains(github.ref_name, '-rc')

    - name: Upload Release Asset (Portable ZIP)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./data-logger-portable.zip
        asset_name: data-logger-${{ github.ref_name }}.zip
        asset_content_type: application/zip

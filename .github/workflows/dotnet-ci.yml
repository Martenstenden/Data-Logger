name: .NET Desktop CI/CD for Data Logger

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2
      with:
        nuget-version: 'latest'

    - name: Restore NuGet packages
      run: nuget restore "Data Logger/Data Logger.sln"

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x86

    - name: Build solution
      run: msbuild "Data Logger/Data Logger.sln" /p:Configuration=Release /p:Platform="Any CPU"

    - name: Setup VSTest
      uses: darenm/Setup-VSTest@v1.2

    - name: Run Unit Tests (excluding IntegrationTests)
      run: vstest.console.exe "DataLogger.Tests/bin/Release/DataLogger.Tests.dll" /TestCaseFilter:"Category!=IntegrationTest" /Logger:trx /ResultsDirectory:"UnitTestResults"

    - name: Upload Unit Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results
        path: UnitTestResults/**/*.trx

    # --- Docker en Integratietests ---
    # De volgende stap zal nog steeds falen met "no matching manifest" als DockerTestHelper.cs
    # onconditioneel probeert 'docker run' uit te voeren voor de Linux image.
    # Het is cruciaal dat je GlobalSetup in C# conditioneel wordt (zie code suggestie hieronder).
    - name: Run Integration Tests
      id: run_integration_tests
      continue-on-error: true # Houd dit voorlopig aan
      run: vstest.console.exe "DataLogger.Tests/bin/Release/DataLogger.Tests.dll" /TestCaseFilter:"Category=IntegrationTest" /Logger:trx /ResultsDirectory:"IntegrationTestResults"
      env:
        # Deze variabele vertelt je C# testcode dat het in CI draait
        CI_ENVIRONMENT: "true"
        # Als je een extern gehoste OPC UA server voor CI zou hebben, zou je hier het endpoint kunnen meegeven:
        # OPCUA_TEST_SERVER_ENDPOINT: "opc.tcp://jouw-externe-test-server:poort/path"
        # Voor nu, zonder externe server, zullen de tests die een server verwachten falen.
        OPCUA_TEST_SERVER_ENDPOINT: "opc.tcp://localhost:62541/Quickstarts/ReferenceServer" # Dit is een placeholder; zal niet werken zonder server

    - name: Upload Integration Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: IntegrationTestResults/**/*.trx

    - name: Check Integration Test Outcome
      if: steps.run_integration_tests.outcome == 'failure' && steps.run_integration_tests.conclusion == 'failure'
      # Dit faalt de build alleen als de integration test stap echt faalde (niet 'skipped' of 'success')
      run: |
        echo "Integration tests failed or were skipped due to setup issues. See uploaded artifacts for details."
        echo "The OPC UA server Docker image is likely Linux-based and cannot be run directly by DockerTestHelper.cs on the Windows runner."
        echo "Modify OpcUaServiceIntegrationTests.GlobalSetup() to not manage Docker in CI_ENVIRONMENT."
        exit 1 # Fail de build

    - name: Upload Build Artifact (Data Logger Application)
      uses: actions/upload-artifact@v4
      with:
        name: data-logger-application
        path: |
          Data Logger/Data Logger/bin/Release/**/*.exe
          Data Logger/Data Logger/bin/Release/**/*.dll
          Data Logger/Data Logger/bin/Release/**/*.config
          Data Logger/bin/Release/Logs 
          Data Logger/bin/Release/LoggedData 
          Data Logger/bin/Release/CertificateStores  

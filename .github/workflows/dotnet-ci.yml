name: .NET Desktop CI/CD for Data Logger

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: windows-latest
    
    env: # Omgevingsvariabelen voor alle stappen in deze job
      CI_ENVIRONMENT: "true" 
      OPCUA_TEST_SERVER_ENDPOINT: "opc.tcp://localhost:62541/Quickstarts/ReferenceServer"
      OPCUA_SERVICE_CONTAINER_NAME: opcua-refserver # Naam van de service container

    services: 
      opcua-refserver: # Dit is de naam/label van de service
        image: ghcr.io/opcfoundation/uanetstandard/refserver:latest
        ports:
          - 62541:62541
        # BELANGRIJK: Voeg hier de server argumenten toe die je in DockerTestHelper.cs gebruikt (-a -c -s)
        # Dit is afhankelijk van hoe de image argumenten accepteert. Voorbeelden:
        # options: >-
        #   -a 
        #   -c 
        #   -s
        # Of via 'command' of 'entrypoint' als de image documentatie dat aangeeft.
        # Zonder de juiste argumenten (vooral -a voor auto-accept) kunnen je tests alsnog falen.

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2
      with:
        nuget-version: 'latest'

    - name: Restore NuGet packages
      run: nuget restore "Data Logger/Data Logger.sln"

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x86 

    - name: Build solution
      run: msbuild "Data Logger/Data Logger.sln" /p:Configuration=Release /p:Platform="Any CPU"

    - name: Wait for OPC UA Reference Server
      shell: pwsh
      run: |
        $serviceName = "${{ env.OPCUA_SERVICE_CONTAINER_NAME }}"
        $timeoutSeconds = 180 # 3 minuten
        $intervalSeconds = 10
        $elapsedSeconds = 0
        $serverStarted = $false

        Write-Host "Wachten tot OPC UA server (container: $serviceName) is opgestart..."

        while ($elapsedSeconds -lt $timeoutSeconds) {
          # Controleer of de container nog draait (optioneel, maar goed voor debuggen)
          $containerState = docker ps --filter "name=$serviceName" --format "{{.State}}"
          if ($containerState -ne "running") {
            Write-Error "Container $serviceName draait niet meer. Status: $containerState"
            docker logs $serviceName --tail 50 # Laatste logs voor diagnose
            exit 1
          }

          Write-Host "Controleren van logs voor '$serviceName' (verstreken tijd: ${elapsedSeconds}s)..."
          # Combineer stdout en stderr voor het geval de melding op stderr komt
          $containerLogs = docker logs $serviceName 2>&1 
          
          # De Regex is afgeleid van je DockerTestHelper.cs
          if ($containerLogs -match 'Server\s+started\.(?:\s+Press\s+Ctrl-C\s+to\s+exit\.\.\.)?') {
            Write-Host "OPC UA server ($serviceName) is succesvol gestart!"
            $serverStarted = $true
            break
          }
          
          Write-Host "Server nog niet volledig gestart. Wachten voor ${intervalSeconds}s..."
          Start-Sleep -Seconds $intervalSeconds
          $elapsedSeconds += $intervalSeconds
        }

        if (-not $serverStarted) {
          Write-Error "Timeout: OPC UA server ($serviceName) is niet gestart binnen ${timeoutSeconds} seconden."
          Write-Host "Laatste beschikbare logs voor $serviceName bij timeout:"
          docker logs $serviceName --tail 100 # Toon de laatste 100 regels van de log voor diagnose
          exit 1
        }
      # Deze stap moet een `id` hebben als andere stappen ervan afhankelijk zijn via `needs`.
      # In dit geval draaien de tests gewoon hierna.

    - name: Setup VSTest
      uses: darenm/Setup-VSTest@v1.2

    - name: Run Unit Tests (excluding IntegrationTests)
      run: vstest.console.exe "DataLogger.Tests/bin/Release/DataLogger.Tests.dll" /TestCaseFilter:"Category!=IntegrationTest" /Logger:trx /ResultsDirectory:"TestResults/UnitTests"

    - name: Upload Unit Test Results
      if: always() 
      uses: actions/upload-artifact@v4
      with:
        name: unit-test-results
        path: TestResults/UnitTests/**/*.trx

    - name: Run Integration Tests
      run: vstest.console.exe "DataLogger.Tests/bin/Release/DataLogger.Tests.dll" /TestCaseFilter:"Category=IntegrationTest" /Logger:trx /ResultsDirectory:"TestResults/IntegrationTests"

    - name: Upload Integration Test Results
      if: always() 
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: TestResults/IntegrationTests/**/*.trx
        
    - name: Create Portable Package Directory
      run: mkdir ./portable-package

    - name: Copy Build Artifacts to Portable Package Directory
      shell: pwsh
      run: |
        $releaseDir = "Data Logger/Data Logger/bin/Release"
        if (-not (Test-Path $releaseDir)) {
          Write-Error "Fout: Release directory '$releaseDir' niet gevonden. De build is mogelijk mislukt of het output pad is incorrect."
          exit 1
        }
        Write-Host "Kopiëren van bestanden uit '$releaseDir' naar './portable-package'"
        Get-ChildItem -Path "$releaseDir" -Filter "*.exe" | Copy-Item -Destination "./portable-package" -ErrorAction Stop
        Get-ChildItem -Path "$releaseDir" -Filter "*.dll" | Copy-Item -Destination "./portable-package" -ErrorAction Stop
        Get-ChildItem -Path "$releaseDir" -Filter "*.config" | Copy-Item -Destination "./portable-package" -ErrorAction Stop
        if (Test-Path "$releaseDir/Logs") {
          Write-Host "Kopiëren van Logs map..."
          Copy-Item -Path "$releaseDir/Logs" -Destination "./portable-package" -Recurse -Force -ErrorAction SilentlyContinue
        }
        if (Test-Path "$releaseDir/LoggedData") {
          Write-Host "Kopiëren van LoggedData map..."
          Copy-Item -Path "$releaseDir/LoggedData" -Destination "./portable-package" -Recurse -Force -ErrorAction SilentlyContinue
        }
        if (Test-Path "$releaseDir/CertificateStores") {
          Write-Host "Kopiëren van CertificateStores map..."
          Copy-Item -Path "$releaseDir/CertificateStores" -Destination "./portable-package" -Recurse -Force -ErrorAction SilentlyContinue
        }
        Write-Host "Bestanden succesvol gekopieerd naar ./portable-package"

    - name: Zip Portable Package
      shell: pwsh
      run: Compress-Archive -Path ./portable-package/* -DestinationPath ./data-logger-portable.zip -Force -ErrorAction Stop

    - name: Upload Portable Package Artifact
      uses: actions/upload-artifact@v4
      with:
        name: data-logger-portable-zip
        path: ./data-logger-portable.zip
